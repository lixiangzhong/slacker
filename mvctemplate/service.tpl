//Generated by slacker
package service

import (
	"{{"gosrc/models"| .ImportLibrary}}/{{.Name}}"
	"{{"gosrc/scope"| .ImportLibrary}}"
	{{if .IsUserTable}}
	"{{"gosrc/errcode"| .ImportLibrary}}"
	{{end}}
)


func (s *Service)Take{{.CamelCaseName}}(data *{{.LowerName}}.{{.CamelCaseName}})error{
	return s.dao.Take{{.CamelCaseName}}(data)
}

func (s *Service)List{{.CamelCaseName}}(search {{.LowerName}}.Search)([]{{.LowerName}}.{{.CamelCaseName}},int,error){
	var where scope.Wheres
	{{if Contains .SwitchCase "state"}} 
		where=append(where,scope.Where("state!=?",{{.LowerName}}.StateDel)) 
	{{end}}
	{{range $i,$col :=.Columns}}
		{{if Contains $col.ColumnType "char"}}
			if search.{{$col.CamelCaseName}} != "" {
			where=append(where,scope.Where("{{$col.ColumnName}}=?",search.{{$col.CamelCaseName}}))
			}
		{{end}}
		{{if Contains $col.ColumnType "int"}}
            {{if NotContains $col.ColumnName "state"}}
				if search.{{$col.CamelCaseName}} > 0 {
					where=append(where,scope.Where("{{$col.ColumnName}}=?",search.{{$col.CamelCaseName}}))
				}
            {{end}}
		{{end}}
	{{end}}
    total,err:=s.dao.Count(search,where...)
    if err!=nil{
        return nil,0,err
    }
	where=append(where,scope.OffsetLimit(search.Offset, search.Limit))
	where=append(where,scope.Order("{{.PrimaryKeyColumn.ColumnName}} desc")) 
	data,err := s.dao.List{{.CamelCaseName}}(where...)
	return data,total, err 
}

func (s *Service) Create{{.CamelCaseName}} (data *{{.LowerName}}.{{.CamelCaseName}}) error {
	{{if .IsUserTable}}
		data.{{.UsernameColumn.CamelCaseName}} = strings.ToLower(data.{{.UsernameColumn.CamelCaseName}})
		data.{{.PasswordColumn.CamelCaseName}} = s.EncryptPassword(data.{{.PasswordColumn.CamelCaseName}})
		if s.dao.{{.CamelCaseName}}IsExist(data.{{.UsernameColumn.CamelCaseName}}) {
			return errcode.AlreadyExist
		}
	{{end}}
	{{.AutomaticCreateUpdateExpression "data"}}
    err := s.dao.Create{{.CamelCaseName}}(data)
	return err
}

func (s *Service)Update{{.CamelCaseName}}(data {{.LowerName}}.{{.CamelCaseName}})error{
		 {{.AutomaticUpdateExpression "data"}}
	  return s.dao.Update{{.CamelCaseName}}(data)
	 
}

func (s *Service)Patch{{.CamelCaseName}}(id int64,update map[string]interface{})error{ 
	{{if .IsUserTable}}
		var {{.Initials}} {{.LowerName}}.{{.CamelCaseName}}
		{{.Initials}}.{{.PrimaryKeyColumn.CamelCaseName}}=id
		err:=s.dao.Take{{.CamelCaseName}}(&{{.Initials}})
		if err!=nil{
			return err
		}
		if val, ok := update["{{.PasswordColumn.ColumnName}}"]; ok {
			password, ok := val.(string)
			if ok {
				if !s.ValidPassword(password, {{.Initials}}.{{.PasswordColumn.CamelCaseName}}) {
					return errcode.IncorrectUserOrPwd
				}
				password, _ = update["newpassword"].(string)
				update["{{.PasswordColumn.ColumnName}}"] = s.EncryptPassword(password)
			}
		}
	{{end}}
		{{.AutomaticUpdateMapExpression}}
	 return s.dao.Patch{{.CamelCaseName}}(id,update) 
}

func (s *Service)Delete{{.CamelCaseName}}(id int64)error{ 
	return s.dao.Delete{{.CamelCaseName}}(id)  
}

{{if .IsUserTable}}
func (s *Service) Take{{.CamelCaseName}}ByName(data *{{.LowerName}}.{{.CamelCaseName}})   error  { 
	return 	s.dao.Take{{.CamelCaseName}}ByName(data)  
}

{{end}}