  <!-- Generated by slacker--> 
<template>
  <el-card>
    <div slot="header">
      <el-form :inline="true" v-model="searchform" @submit.native.prevent="none">
        <el-form-item>
          <el-input prefix-icon="el-icon-search" clearable v-model.number="searchform.id" placeholder="查找内容"></el-input>
        </el-form-item> 
        <el-form-item>
          <el-button type="primary" @click="Search" icon="el-icon-search">查询</el-button>
          <el-button @click="resetsearchform">清空查询条件</el-button>
        </el-form-item>
      </el-form>
       <el-button @click="create.visible = true" type="primary" round class="card-button" icon="el-icon-plus">添加</el-button>
      <div style="clear:both"></div>
    </div>
    <el-table :data="table.data" style="width: 100%"   v-loading="table.loading">

      </el-table-column>
        {{range $i,$col:=.Columns}}
      <el-table-column label="{{$col.CamelCaseName}}">
        <template slot-scope="scope">
          <span> <<< scope.row.{{$col.ColumnName}} >>> </span>
        </template>
      </el-table-column>
         {{end}}
      <el-table-column label="操作">
        <template slot-scope="scope">
          <el-button size="small" type="primary" plain @click="OnClickEdit(scope.row)" icon="el-icon-edit"> </el-button>
          <el-button size="small" type="danger" @click="Delete(scope.row)" icon="el-icon-delete"></el-button>
        </template>
      </el-table-column>
    </el-table>

    <el-pagination :hide-on-single-page="true" class="pagination" background layout=" sizes, total, prev, pager, next" :total="table.total" :page-size="table.limit" :page-sizes="[10, 50, 100, 999]" @size-change="SizeChange" 
     :current-page="table.page" @current-change="PageChange">
    </el-pagination>

    <el-dialog title="添加" :visible.sync="create.visible" width="500px">
      <el-form :model="create.form" label-position="right" label-width="100px">
          {{range $i,$col:=.Columns}}
           {{if not $col.IsPrimaryKey}}
        <el-form-item label="{{$col.CamelCaseName}}">
          <el-input v-model.{{if Contains $col.Type "int"}}number{{else}}trim{{end}}="create.form.{{$col.ColumnName}}" auto-complete="off"></el-input>
        </el-form-item>
            {{end}}
          {{end}}
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="create.visible = false">取 消</el-button>
        <el-button type="primary" @click="Create">确 定</el-button>
      </div>
    </el-dialog>

    <el-dialog title="编辑" :visible.sync="update.visible" width="500px">
      <el-form :model="update.form" label-position="right" label-width="100px">
      {{range $i,$col:=.Columns}}
          {{if not $col.IsPrimaryKey}}
        <el-form-item label="{{$col.CamelCaseName}}">
          <el-input v-model.{{if Contains $col.Type "int"}}number{{else}}trim{{end}}="update.form.{{$col.ColumnName}}" auto-complete="off"></el-input>
        </el-form-item>
          {{end}}
      {{end}}
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="update.visible = false">取 消</el-button>
        <el-button type="primary" @click="Update">确 定</el-button>
      </div>
    </el-dialog>

  </el-card>
</template>

<script>
  import * as api from "@/api/{{.Name}}";
  export default {
    data() {
      return {
        table: {
          loading: false,
          data: [],
          total: 0,
          page: 1,
          offset: 0,
          limit: 10
        },
        searchform: {},
        create: {
          form: {},
          visible: false
        },
        update: {
          form: {},
          visible: false
        },
      };
    },
    methods: {
      getdata() {
        this.table.loading = true;
        api
          .List(
            Object.assign(
              { offset: this.table.offset, limit: this.table.limit },
              this.searchform
            )
          )
          .then(rsp => {
            this.table.total = rsp.data.total;
            this.table.data = rsp.data.data;
            this.table.loading = false;
          })
          .catch(err => {});
      },
      PageChange(val) {
        this.table.page=val
        this.table.offset = this.table.limit * (val - 1);
        this.getdata();
      },
      SizeChange(val) {
        this.table.limit = val;
        this.getdata();
      },
      resetcreateform() {
        this.create.visible = false;
        this.create.form = {};
      },
      resetsearchform() {
        this.searchform = {};
        this.Search();
      },
      Search() {
        this.table.page=1
        this.table.offset = 0;
        this.getdata();
      },
      Create() {
        let loading = this.$loading({
          lock: true,
          text: "操作中...",
          spinner: "el-icon-loading",
          background: "rgba(0, 0, 0, 0.7)"
        });
        api
          .Create(this.create.form)
          .then(rsp => {
            this.resetcreateform();
            this.getdata();
          })
          .catch(err => {})
          .then(() => {
            loading.close();
          });
      },
      Delete(row) {
        this.$confirm("此操作将删除此条数据, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            api
              .Delete(row.{{.PrimaryKeyColumn.ColumnName}})
              .then(rsp => {
                this.$notify.success("删除成功");
                this.getdata();
              })
              .catch(err => {});
          })
          .catch(err => {});
      },
      Update() {
        api
          .Update(this.update.form.{{.PrimaryKeyColumn.ColumnName}}, this.update.form)
          .then(rsp => {
            this.update.visible = false;
            this.$notify.success("更新成功");
            this.getdata();
          })
          .catch(err => {});
      },
      OnClickEdit(row){
         this.update.form = Object.assign({}, row);
            this.update.visible = true;
      },
      none(){}
    }, 
    created() {
      this.getdata(); 
    }
  };
</script>

 